lua_shared_dict prometheus_metrics 10M;
lua_package_path '/app/libs/?.lua;/app/configs/?.lua;;';

init_by_lua_block {
	
	local config = require "myauth.config".load("/app/configs/auth-config.lua")
	local secrets = require "myauth.secrets".load("/app/configs/auth-secrets.lua")

	metrics_event_listener = require "metrics-event-listener"

	a = require "myauth"
	a.initialize(config, secrets)
	a.event_listener = metrics_event_listener

	target_server = os.getenv("TARGET_SERVER")
	service_sign = os.getenv("SERVICE_SIGN")
}

init_worker_by_lua_block {

  prometheus = require("prometheus").init("prometheus_metrics")
  metric_requests = prometheus:counter(
    "nginx_http_requests_total", "Number of HTTP requests", {"host", "status"})
  metric_latency = prometheus:histogram(
    "nginx_http_request_duration_seconds", "HTTP request latency", {"host"})
  metric_connections = prometheus:gauge(
    "nginx_http_connections", "Number of HTTP connections", {"state"})

  metrics_event_listener.initialize(prometheus)
}

server {
	listen 80;
	server_name default_server;

	location / {

		set $target_server '';
		
		access_by_lua_block {

			ngx.var.target_server = target_server
			a.authorize()
		}

		include /etc/nginx/snippets/default-location.conf;

		proxy_pass_request_headers on;
		resolver 127.0.0.11 ipv6=off;
		proxy_pass http://$target_server;	

		log_by_lua_block {
			metric_requests:inc(1, {ngx.var.server_name, ngx.var.status})
		  	metric_latency:observe(tonumber(ngx.var.request_time), {ngx.var.server_name})
		}	
	}

	location /metrics {
	    content_by_lua_block {
	        metric_connections:set(ngx.var.connections_reading, {"reading"})
	        metric_connections:set(ngx.var.connections_waiting, {"waiting"})
	        metric_connections:set(ngx.var.connections_writing, {"writing"})
	        prometheus:collect()
		}
	}

	location @route_error{
    
		set_by_lua_block $service_sign {

			if service_sign ~= nil then
				return service_sign
			else
				return 'myauth-proxy'
			end

		}

		add_header 'X-Service' '$service_sign' always;

		return 200;
	}

	error_page 403 404 500 502 504 @route_error;
}